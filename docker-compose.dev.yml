version: '3.9'
services:
  web:
    container_name: web
    build:
      context: ./app/frontend
      dockerfile: Dockerfile.dev
    ports:
      - ${WEB_PORT:-3000}:${WEB_PORT:-3000}
    volumes:
      - ./app/frontend/src:/app-frontend/src
    depends_on:
      - api
      - whatsapp-api
    environment:
      - PORT=${WEB_PORT:-3000}
      - API_URL=${API_URL:-http://api:3001}
      - NEXT_PUBLIC_WHATSAPP_API=${WHATSAPP_API_URL:-http://whatsapp-api:3002}
    healthcheck:
      test: [ "CMD", "lsof", "-t", "-i:3000" ]
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  api:
    container_name: api
    build:
      context: ./app/backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./app/backend/src:/app-backend/src
    ports:
      - ${API_PORT:-3001}:${API_PORT:-3001}
    command: sh -c "npm run db:generate && npm run db:migrate && npm run db:seed && npm run dev"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=${API_PORT:-3001}
      - DATABASE_URL=${DATABASE_URL:-postgres://${POSTGRES_USER:-docker}:${POSTGRES_PASSWORD:-docker}@db:5432/${POSTGRES_DB:-queue-dev}}
      - JWT_SECRET=${JWT_SECRET:-SENHACECRETA}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1d}
      - WHATSAPP_API_URL=${WHATSAPP_API_URL:-http://whatsapp-api:3002}
      - DEPLOY_URL=${DEPLOY_URL}
      - MP_ACCESS_TOKEN=${MP_ACCESS_TOKEN}
    healthcheck:
      test: [ "CMD", "lsof", "-t", "-i:3001" ]
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  whatsapp-api:
    container_name: whatsapp-api
    build:
      context: ./app/whatsapp-api
      dockerfile: Dockerfile.dev
    ports:
      - ${WA_PORT:-3002}:${WA_PORT:-3002}
    volumes:
      - ./app/whatsapp-api/src:/app-whatsapp-api/src
      - ./app/whatsapp-api/tokens:/app-whatsapp-api/tokens
    environment:
      - PORT=${WA_PORT:-3002}
    healthcheck:
      test: [ "CMD", "lsof", "-t", "-i:3002" ]
      timeout: 10s
      retries: 5
    networks:
      - app-network

  db:
    image: bitnami/postgresql:13.16.0
    container_name: db
    ports:
      - 5432:5432/tcp
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-docker}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-docker}
      - POSTGRES_DB=${POSTGRES_DB:-queue-dev}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U docker" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

volumes:
  db-data:


networks:
  app-network:
    driver: bridge
